<?xml version="1.0" encoding="utf-8" standalone="no"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark" close="handleCloseEvent();" creationComplete="userDetailsForm_creationCompleteHandler(event)" height="300" title="UserDetails Form" width="400">
    <fx:Script>
        <![CDATA[
            import mx.collections.ArrayCollection;
            import mx.controls.Alert;
            import mx.events.FlexEvent;
            import mx.managers.PopUpManager;
            import mx.messaging.ChannelSet;
            import mx.rpc.events.FaultEvent;
            import mx.rpc.events.ResultEvent;
            
            import mx.validators.Validator;
            
            import org.flex.tutorial.domain.auth.UserDetails;
            
            import org.flex.tutorial.domain.model.UserInfo;

            
            [Bindable]
            public var remotingChannels:ChannelSet;
            
            [Bindable]
            public var userDetails:UserDetails;
            
            private function handleCloseEvent():void {
                PopUpManager.removePopUp(this);
            }            
            
            private function processSave():void {
                if (!validateAndCommit()){
                    return;
                }
                this.dispatchEvent(new UserDetailsEvent(((!userDetails.id || userDetails.id <= 0) ? UserDetailsEvent.CREATE : UserDetailsEvent.UPDATE), userDetails));
                PopUpManager.removePopUp(this);
            }
            
            private function validateAndCommit():Boolean{
                var validatorErrors:Array = Validator.validateAll(validators.source);
                if (validatorErrors.length > 0){
                    return false;
                }
                userDetails.password = passwordInput.text;
                userDetails.username = usernameInput.text;
                userDetails.accountNonExpired = accountNonExpiredInput.selected;

                userDetails.accountNonLocked = accountNonLockedInput.selected;

                userDetails.credentialsNonExpired = credentialsNonExpiredInput.selected;

                userDetails.enabled = enabledInput.selected;

                userDetails.userInfo = userInfoInput.selectedItem;

                return true;
            }
            
            protected function userDetailsForm_creationCompleteHandler(event:FlexEvent):void
            {
                userInfoService.list();

            }
            
            protected function userInfoService_faultHandler(event:FaultEvent):void
            {
                Alert.show(event.fault.faultString, "Remote Operation Failed");
            }

            protected function userInfoService_listResultHandler(event:ResultEvent):void
            {
                userInfoInput.dataProvider = event.result as ArrayCollection;
                selectUserInfo();
            }

            private function selectUserInfo():void {
            	if (userDetails.userInfo == null) {
            		return;
            	}
            	for each(var userInfoItem:UserInfo in userInfoInput.dataProvider) {
            		if (userDetails.userInfo.id == userInfoItem.id) {
            			userInfoInput.selectedItem = userInfoItem;
            			return;
            		}
            	}
            }


        ]]>
    </fx:Script>
    
    <fx:Declarations>
    	<s:RemoteObject channelSet="{remotingChannels}" destination="userInfoService" fault="userInfoService_faultHandler(event)" id="userInfoService">
    	    <s:method name="list" result="userInfoService_listResultHandler(event)"/>
    	</s:RemoteObject>
        <s:ArrayList id="validators">
            <mx:StringValidator id="passwordValidator" minLength="2" property="text" required="true" source="{passwordInput}"/>
            <mx:StringValidator id="usernameValidator" maxLength="20" minLength="2" property="text" required="true" source="{usernameInput}"/>
            <mx:StringValidator id="accountNonExpiredValidator" property="text" required="true" source="{accountNonExpiredInput}"/>
            <mx:StringValidator id="accountNonLockedValidator" property="text" required="true" source="{accountNonLockedInput}"/>
            <mx:StringValidator id="credentialsNonExpiredValidator" property="text" required="true" source="{credentialsNonExpiredInput}"/>
            <mx:StringValidator id="enabledValidator" property="text" required="true" source="{enabledInput}"/>
        </s:ArrayList>
    </fx:Declarations>
    
    <s:layout>
        <s:VerticalLayout/>
    </s:layout>
    
    <mx:Form id="userDetailsForm">
        <mx:FormItem id="passwordField" label="Password">
        	<s:TextInput id="passwordInput" text="{userDetails.password}"/>
        </mx:FormItem>
        <mx:FormItem id="usernameField" label="Username">
        	<s:TextInput id="usernameInput" text="{userDetails.username}"/>
        </mx:FormItem>
        <mx:FormItem id="accountNonExpiredField" label="Account Non Expired">
        	<s:CheckBox id="accountNonExpiredInput" selected="{userDetails.accountNonExpired}"/>
        </mx:FormItem>
        <mx:FormItem id="accountNonLockedField" label="Account Non Locked">
        	<s:CheckBox id="accountNonLockedInput" selected="{userDetails.accountNonLocked}"/>
        </mx:FormItem>
        <mx:FormItem id="credentialsNonExpiredField" label="Credentials Non Expired">
        	<s:CheckBox id="credentialsNonExpiredInput" selected="{userDetails.credentialsNonExpired}"/>
        </mx:FormItem>
        <mx:FormItem id="enabledField" label="Enabled">
        	<s:CheckBox id="enabledInput" selected="{userDetails.enabled}"/>
        </mx:FormItem>
        <mx:FormItem id="userInfoField" label="User Info">
        	<s:DropDownList id="userInfoInput" labelField="firstname"/>	</mx:FormItem>
    </mx:Form>
    
    <s:Group>
        <s:layout>
            <s:HorizontalLayout/>
        </s:layout>
        <s:Button click="processSave();" label="Save"/>
        <s:Button click="handleCloseEvent();" label="Cancel"/>
    </s:Group>
    
    
</s:TitleWindow>
